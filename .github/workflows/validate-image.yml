name: Validate Docker image

on:
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  security-events: write
  contents: read
  pull-requests: write

jobs:
  changed-files:
    name: Get changed files
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.changed-files.outputs.all_changed_files }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v44
        with:
          matrix: true
          files: |
            docker/ansible/templates/compose-modules/**.yml
      - name: List all changed files
        run: echo '${{ steps.changed-files.outputs.all_changed_files }}'

  scan-docker-images:
    name: Scan Docker images
    runs-on: ubuntu-latest
    needs: [changed-files]
    if: ${{ needs.changed-files.outputs.matrix != '[]' && needs.changed-files.outputs.matrix != '' }}
    strategy:
      matrix:
        files: ${{ fromJSON(needs.changed-files.outputs.matrix) }}
      max-parallel: 4
      fail-fast: false
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get image ID
        id: getimage
        # TODO: [validate-image] Make pipeline compatible with multiple images from the same file
        # TODO: [validate-image] Use Python to get the image ID properly
        run: |
          IMAGE_ID=$(cat ${{ matrix.files }} | grep 'image:' | sed 's/image:\s*//g' | tr -d '[:blank:]' | head -n 1)
          echo "::set-output name=imageid::$IMAGE_ID"

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.21.0
        with:
          image-ref: "${{ steps.getimage.outputs.imageid }}"
          format: "sarif"
          severity: "CRITICAL,HIGH"
          output: "trivy-results.sarif"

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.21.0
        with:
          image-ref: "${{ steps.getimage.outputs.imageid }}"
          format: "json"
          severity: "CRITICAL,HIGH"
          output: "trivy-results.json"

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: "trivy-results.sarif"

      - name: Run Trivy on the image
        id: archcheck
        run: |
          RESULTS_FILE="trivy-results.json"
          if [[ -s "$RESULTS_FILE" ]]; then
            ARCHITECTURE=$(cat $RESULTS_FILE | jq -r '.Metadata.ImageConfig.architecture')
            if [[ "$ARCHITECTURE" != "amd64" ]]; then
              echo "Image architecture is not amd64! It is $ARCHITECTURE"
              echo "::set-output name=image_arch::$ARCHITECTURE"
              exit 1
            else
              echo "Architecture is amd64"
              echo "::set-output name=image_arch::$ARCHITECTURE"
            fi
          fi

      - name: Comment PR - Failure
        uses: thollander/actions-comment-pull-request@v2
        if: failure() && steps.archcheck.outputs.image_arch
        with:
          message: |
            ❌ Image architecture is not AMD64! It's ${{ steps.archcheck.outputs.image_arch }}.

      - name: Close Pull Request
        if: failure() && steps.archcheck.outputs.image_arch
        run: gh pr close --comment "Image architecture is not AMD64! It's ${{ steps.archcheck.outputs.image_arch }}" --delete-branch "1"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Comment PR - Success
        uses: thollander/actions-comment-pull-request@v2
        if: success() && steps.archcheck.outputs.image_arch
        with:
          message: |
            ✅ Image architecture is ${{ steps.archcheck.outputs.image_arch }}.
