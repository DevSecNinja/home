services:
  # NOTE: MongoDB doesn't support auto upgrade of container
  # Before upgrading to a new major version, run (change MONGO_VERSION to CURRENT version):
  # export MONGO_VERSION=6.0
  # docker compose exec unifi-db mongosh --eval 'db.adminCommand( { setFeatureCompatibilityVersion: "'$MONGO_VERSION'" } )'

  unifi-db:
    image: docker.io/mongo:7.0.5
    container_name: unifi-db
    networks:
      - unifi-backend
    volumes:
      - unifi_db_data:/data/db
      - $DOCKERDIR/data/mongodb/init-mongo-unifi-db.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    labels:
      # Watchtower
      - com.centurylinklabs.watchtower.monitor-only="true"
    restart: unless-stopped

  unifi-db-backup:
    container_name: unifi-db-backup
    image: tiredofit/db-backup:4.0.35
    depends_on:
      - unifi-db
    volumes:
      - $DOCKERDIR/data/backup:/backup # TODO: [db-backup] Backup directly to SMB Share
    networks:
      - unifi-backend
    environment:
      - TIMEZONE=${TZ}
      - USER_DBBACKUP=${PUID}
      - GROUP_DBBACKUP=${PGID}
      - CONTAINER_NAME=unifi-db-backup
      - CONTAINER_ENABLE_MONITORING=FALSE # Disables Zabbix backup statistics

      - ENABLE_NOTIFICATIONS=FALSE # TODO: [db-backup] Use notifications (SMTP auth not supported)

      - DEFAULT_CHECKSUM=SHA1        # Set standard checksum to SHA1
      - DEFAULT_COMPRESSION=ZSTD     # Compress all with ZSTD
      - DEFAULT_BACKUP_INTERVAL=1440 # Backup every 1440 minutes = 24 hours
      - DEFAULT_BACKUP_BEGIN=0000    # Start backing up at midnight
      - DEFAULT_CLEANUP_TIME=2880    # Cleanup backups after two days
      - DEFAULT_ENCRYPT=TRUE         # Encrypt backup files with GPG
      - DEFAULT_ENCRYPT_PASSPHRASE=${DB_ENC_PASSPHRASE} # Set encryption password

      - DB01_TYPE=mongo
      - DB01_HOST=unifi-db
      - DB01_NAME=unifi
      - DB01_USER=unifi
      - DB01_PORT=27017
      - DB01_PASS=${UNIFI_MONGO_PASS}
    restart: always
    security_opt:
      - no-new-privileges:true

  unifi:
    container_name: unifi
    image: lscr.io/linuxserver/unifi-network-application:8.0.26-ls25
    depends_on:
      - traefik
      - unifi-db
    networks:
      - t2_proxy
      - default
      - unifi-backend
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - MONGO_USER=unifi
      - MONGO_PASS=${UNIFI_MONGO_PASS}
      - MONGO_HOST=unifi-db
      - MONGO_PORT=27017
      - MONGO_DBNAME=unifi
      - MEM_LIMIT=1024 #optional
    volumes:
      - unifi_data:/config
    healthcheck:
      test: ["CMD", "curl", "-f", "-k", "https://localhost:8443"]
      interval: 1m
      timeout: 10s
      retries: 3
      start_period: 1m
    ports:
      - 3478:3478/udp # used for STUN
      - 10001:10001/udp # used for device discovery
      - 8080:8080 # used for device and controller communications
      - 1900:1900/udp #optional - used for "Make controller discoverable on L2 network" in controller settings
      # - 8843:8843 #optional - used for HTTPS portal redirection
      # - 8880:8880 #optional - used for HTTP portal redirection
      - 6789:6789 #optional - used for UniFi mobile speed test
      # - 5514:5514/udp #optional - used for remote syslog capture
      - 2221:22/tcp # used for SSH
    restart: always
    security_opt:
      - no-new-privileges:true
    labels:
      # Watchtower
      - com.centurylinklabs.watchtower.monitor-only="true"
      # Homepage
      - homepage.group=Networking
      - homepage.name=Unifi
      - homepage.icon=unifi.svg
      - homepage.href=https://unifi.$DOMAINNAME
      - homepage.description=Ubiquiti Network Controller
      # Backup
      - docker-volume-backup.stop-during-backup=false # true - otherwise backup can't work with socketproxy
      # Traefik
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.unifi-rtr.entrypoints=https"
      - "traefik.http.routers.unifi-rtr.rule=Host(`unifi.$DOMAINNAME`)"
      - "traefik.http.routers.unifi-rtr.tls=true"

      - "traefik.http.routers.unifi-guest-rtr.entrypoints=unifi-guest"
      - "traefik.http.routers.unifi-guest-rtr.rule=Host(`unifi-guest.$DOMAINNAME`)"
      - "traefik.http.routers.unifi-guest-rtr.tls=true"
      ## Middlewares
      - "traefik.http.routers.unifi-rtr.middlewares=chain-no-auth@file" # No Authentication
      - "traefik.http.routers.unifi-guest-rtr.middlewares=chain-no-auth@file" # No Authentication
      ## HTTP Services
      - "traefik.http.routers.unifi-rtr.service=unifi"
      - "traefik.http.routers.unifi-guest-rtr.service=unifi-guest"
      # Fixes 'This combination of host and port requires TLS' issue
      - "traefik.http.services.unifi.loadbalancer.server.scheme=https"
      - "traefik.http.services.unifi-guest.loadbalancer.server.scheme=https"
      # Enable the management port 8443
      - "traefik.http.services.unifi.loadbalancer.server.port=8443"
      - "traefik.http.services.unifi-guest.loadbalancer.server.port=8843"

volumes:
  unifi_data:
  unifi_db_data:

networks:
  unifi-backend:
    name: unifi-backend
    driver: bridge
