---
- hosts: docker
  become: yes
  vars:
    # Directories
    templates_src_path: "../templates/data/{{inventory_hostname_short}}"
    templates_common_src_path: "../templates/data/common"
    templates_dest_path: "/srv/docker/data"
  tasks:

    - include_tasks: ../tasks/configure-ufw.yaml

    - name: Load encrypted credentials
      community.sops.load_vars:
        file: ../inventory/group_vars/all/secrets.sops.yml
        age_keyfile: $HOME/git/home/age.key
        config_path: $HOME/git/home/.sops.yaml
        expressions: ignore  # explicitly do not evaluate expressions
                             # on load (this is the default)

    - name: Dynamically create compose file
      ansible.builtin.template:
        src: "../templates/compose/compose.yml.j2"
        dest: "/srv/docker/docker-compose.yml"
        owner: "{{ansible_user}}"
        group: "docker"
        mode: "0755"

    - name: Dynamically create .env file
      ansible.builtin.template:
        src: "../templates/env/env.j2"
        dest: "/srv/docker/.env"
        owner: "{{ansible_user}}"
        group: "docker"
        mode: "0755"

    # Common
    - name: "[Common] Copy all data directories recursively"
      file: dest={{templates_dest_path}}/{{ item|replace(templates_common_src_path+'/', '') }} state=directory owner={{ansible_user}} group=docker mode=0755
      with_items: "{{ lookup('pipe', 'find '+ templates_common_src_path +'/ -type d').split('\n') }}"

    - name: "[Common] Copy all data files recursively"
      copy: src={{ item }} dest={{templates_dest_path}}/{{ item|replace(templates_common_src_path+'/', '') }}  owner={{ansible_user}} group=docker mode=0755
      with_items: "{{ lookup('pipe', 'find '+ templates_common_src_path +'/ -type f -not -name *.j2 ').split('\n') }}"

    - name: "[Common] Copy data templates files recursively"
      template: src={{ item }} dest={{templates_dest_path}}/{{ item|replace(templates_common_src_path+'/', '')|replace('.j2', '') }}  owner={{ansible_user}} group=docker mode=0755
      with_items: "{{ lookup('pipe', 'find '+ templates_common_src_path +'/ -type f -name *.j2').split('\n') }}"

    # Server specific
    - name: Check if server specific folder exists
      stat:
        path: "{{ templates_src_path }}"
      register: check_server_folder_exists
      delegate_to: localhost

    - name: "[Server] Get data directories"
      shell: "find {{ templates_src_path }}/ -type d || true"
      register: data_directories
      delegate_to: localhost
      when: check_server_folder_exists.stat.exists == true

    - name: "[Server] Copy all data directories recursively"
      file: dest={{templates_dest_path}}/{{ item|replace(templates_src_path+'/', '') }} state=directory owner={{ansible_user}} group=docker mode=0755
      with_items: "{{ data_directories.stdout_lines }}"
      when:
        - check_server_folder_exists.stat.exists == true
        - item != ""

    - name: "[Server] Get data files and templates"
      shell: "find {{ templates_src_path }}/ -type f -not -name *.j2 || true"
      register: data_files
      delegate_to: localhost
      when: check_server_folder_exists.stat.exists == true

    - name: "[Server] Copy all data files recursively"
      copy: src={{ item }} dest={{templates_dest_path}}/{{ item|replace(templates_src_path+'/', '') }}  owner={{ansible_user}} group=docker mode=0755
      with_items: "{{ data_files.stdout_lines }}"
      when:
        - check_server_folder_exists.stat.exists == true
        - item != ""

    - name: "[Server] Get data templates"
      shell: "find {{ templates_src_path }}/ -type f -name *.j2 || true"
      register: data_templates
      delegate_to: localhost
      when: check_server_folder_exists.stat.exists == true

    - name: "[Server] Copy data templates files recursively"
      template: src={{ item }} dest={{templates_dest_path}}/{{ item|replace(templates_src_path+'/', '')|replace('.j2', '') }}  owner={{ansible_user}} group=docker mode=0755
      with_items: "{{ data_templates.stdout_lines }}"
      when:
        - check_server_folder_exists.stat.exists == true
        - item != ""

    - name: Copy compose-modules folder
      copy:
        src: "../templates/compose-modules/"
        dest: "/srv/docker/data/compose"
        owner: "{{ansible_user}}"
        group: "docker"
        mode: "0755"

    - name: Run containers
      register: docker_container_run_result
      shell:
        cmd: "docker compose up -d --remove-orphans --wait 2>&1"
        chdir: /srv/docker

    - name: Show Output
      debug: msg="{{ docker_container_run_result.stdout_lines }}"
      when: docker_container_run_result.changed

    # TODO: [ansible] Restart containers if content in config folder has changed
    - name: Restart Unbound DNS container
      shell:
        cmd: "docker restart unbound 2>&1"
        chdir: /srv/docker
      when: inventory_hostname in groups['dnsservers']

  handlers:
    - import_tasks: ../handlers/main.yml
